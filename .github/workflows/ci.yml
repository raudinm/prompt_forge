name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint PromptForge App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Test PromptForge App
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: |
          python manage.py migrate
        env:
          CI: true
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
          # Postgres env to avoid CI errors
          DATABASE_NAME: "test_db"
          DATABASE_USER: "postgres"
          DATABASE_PASSWORD: "postgres"
          DATABASE_HOST: "localhost"
          DATABASE_PORT: 5432

      - name: Run tests with SQLite
        run: |
          pytest --ds=prompt_forge.settings -v
        env:
          CI: true
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
          # Postgres env to avoid CI errors
          DATABASE_NAME: "test_db"
          DATABASE_USER: "postgres"
          DATABASE_PASSWORD: "postgres"
          DATABASE_HOST: "localhost"
          DATABASE_PORT: 5432

  deploy:
    name: Deploy PromptForge App
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "üìù Creating .env file from secret..."
          rm -f .env
          echo "${{ secrets.ENV_VARS }}" > .env

      - name: Set up SSH key
        run: |
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ssh_deploy_key
          chmod 600 ssh_deploy_key

      - name: Compress project files
        run: |
          echo "üì¶ Compressing project files..."
          sudo mkdir -p /temp
          sudo cp -r * /temp/
          tar --exclude='.git' --exclude='ssh_deploy_key' -czf promptforge.tar.gz /temp

      - name: Copy project to server
        run: |
          echo "üöÄ Copying project archive to remote server..."
          scp -i ssh_deploy_key -o StrictHostKeyChecking=no promptforge.tar.gz \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/

      - name: Deploy PromptForge on remote server
        run: |
          echo "‚öôÔ∏è Deploying PromptForge on remote server..."
          ssh -i ssh_deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            set -e

            APP_DIR="/var/www/html/promptforge"
            TMP_FILE="/tmp/promptforge.tar.gz"

            echo "üßπ Cleaning old deployment..."
            sudo rm -rf \$APP_DIR
            sudo mkdir -p \$APP_DIR
            sudo chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} \$APP_DIR

            echo "üì¶ Extracting project files..."
            sudo tar -xzf \$TMP_FILE -C \$APP_DIR
            sudo rm \$TMP_FILE

            cd \$APP_DIR

            echo "üê≥ Building and starting Docker containers..."
            docker compose pull || true
            docker compose build --no-cache
            docker compose up -d --remove-orphans

            echo "‚úÖ PromptForge deployed successfully!"
          EOF

      - name: Cleanup local artifacts
        run: |
          rm -f ssh_deploy_key /tmp/promptforge.tar.gz
